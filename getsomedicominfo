#!/usr/bin/env python

import os
import sys
import dicom


def clean(instring):
    return instring.replace(" ", "_").replace('"', '').replace("'", "").replace(", ", " ")


def readrfpulses(theheader):
    numrfpulses = 0
    thepulses = []
    therearepulses = True
    while therearepulses:
        rootname = 'sTXSPEC.aRFPULSE[' + str(numrfpulses) + '].'
        thepulse = []
        for field in ('tName', 'flAmplitude'):
            try:
                thedata = theheader[rootname + field]
            except KeyError:
                therearepulses = False
            else:
                thepulse.append(clean(thedata))
        thepulses.append(thepulse)
        numrfpulses = numrfpulses + 1
    return thepulses


def getsiemensmrheader(theplan):
    datadict = {}
    allheaderspresent = True
    try:
        SiemensCSAHeader = theplan[0x0029, 0x0010].value
    except KeyError:
        allheaderspresent = False

    try:
        SeriesHeader = theplan[0x0029, 0x1020].value
        # print SeriesHeader
    except KeyError:
        allheaderspresent = False

    try:
        ImageHeader = theplan[0x0029, 0x1010].value
        # print "############################ IMAGE ####################################"
        # print ImageHeader
    except KeyError:
        allheaderspresent = False

    try:
        SiemensCSAHeader2 = theplan[0x0029, 0x1020].value
    except KeyError:
        allheaderspresent = False

    if allheaderspresent:
        startposition = SiemensCSAHeader2.find('### ASCCONV BEGIN ###') + len('### ASCCONV BEGIN ###')
        endposition = SiemensCSAHeader2.find('### ASCCONV END ###')
        InterestingSiemensHeader = SiemensCSAHeader2[startposition:endposition].splitlines()
        for theline in InterestingSiemensHeader[1:]:
            thepair = theline.split()
            # print thepair
            datadict[thepair[0]] = thepair[2]

    return datadict

# read in the datafile
if len(sys.argv) != 2:
    print("usage: getdicominfo inputfile")
    exit()
filename = sys.argv[1]
plan = dicom.read_file(filename)

# print 'Metadata:'
# print plan.file_meta
# print
# print
# print
# print 'Dicom Header:'
# print plan

#

# You don't want to look up here ^
timestr = float(plan.AcquisitionTime)
thetr = float(plan.RepetitionTime)
thete = float(plan.EchoTime)
timeconv = 3600 * (int(timestr / 10000) % 100) + 60 * (int(timestr / 100) % 100) + timestr % 100 + (timestr - int(timestr))
acqnum = plan.AcquisitionNumber
thesiemensheader = getsiemensmrheader(plan)
# print thesiemensheader
if thesiemensheader != {}:
    # this is where you get things from the Siemens header (things in square brackets)
    slicethickness = thesiemensheader['sSliceArray.asSlice[0].dThickness']
    # reflines=thesiemensheader['sPat.lRefLinesPE']
    patmode = thesiemensheader['sPat.ucPATMode']
    thepulses = readrfpulses(thesiemensheader)
    imagingfreq = thesiemensheader['sTXSPEC.asNucleusInfo[0].lFrequency']
    refamplitude = thesiemensheader['sTXSPEC.asNucleusInfo[0].flReferenceAmplitude']
    #diffweight = thesiemensheader['sDiffusion.lDiffWeightings']
    #Bvalue = thesiemensheader['sDiffusion.alBValue[1]']
    #noiselevel = thesiemensheader['sDiffusion.lNoiseLevel']
    #diffdir = thesiemensheader['sDiffusion.lDiffDirections']
    #mode = thesiemensheader['sDiffusion.ulMode']
    #txamp = thesiemensheader['sTXSPEC.aRFPULSE[0].flAmplitude']

# print txspec

# this is how you get things from the dicom header
orientation = plan[0x0051, 0x100e].value
flip = plan[0x0018, 0x1314].value
sar = plan[0x0018, 0x1316].value
protocol = clean(plan[0x0018, 0x1030].value)
sequence = clean(plan[0x0018, 0x0024].value)
reqproc = clean(plan[0x0032, 0x1060].value)
try:
    date = plan[0x0008, 0x0012].value
except KeyError:
    print(filename, ' has no date field')
# monitorsar=plan[0x0019,0x1084].value
else:
    thepath = os.path.dirname(filename)
    print(thepath, '\t',\
        date, '\t', timestr, '\t', protocol, '\t', sequence, '\t', thetr, '\t', thete, '\t', patmode, '\t', acqnum, '\t',\
        slicethickness, '\t', patmode, '\t',\
        sar, '\t', flip, '\t', imagingfreq, '\t', refamplitude, '\t', reqproc, '\t', thepulses)
