#!/usr/bin/env python

import sys
import dicom
import numpy as np


def getslicepositions(theplan):
    SiemensCSAHeader2 = theplan[0x0029, 0x1020].value
    startposition = SiemensCSAHeader2.find('### ASCCONV BEGIN ###') + len('### ASCCONV BEGIN ###')
    endposition = SiemensCSAHeader2.find('### ASCCONV END ###')
    InterestingSiemensHeader = SiemensCSAHeader2[startposition:endposition].splitlines()
    datadict = {}
    saglist = []
    tralist = []
    corlist = []
    for theline in InterestingSiemensHeader[1:]:
        thepair = theline.split()
        if (thepair[0][0:len('sSliceArray.asSlice')] == 'sSliceArray.asSlice'):
            if (thepair[0][-len('sPosition.dSag'):] == 'sPosition.dSag'):
                saglist.append(thepair[2])
            if (thepair[0][-len('sPosition.dTra'):] == 'sPosition.dTra'):
                tralist.append(thepair[2])
            if (thepair[0][-len('sPosition.dCor'):] == 'sPosition.dCor'):
                corlist.append(thepair[2])
    return saglist, tralist, corlist


def getsiemensmrheader(theplan):
    SiemensCSAHeader2 = theplan[0x0029, 0x1020].value
    startposition = SiemensCSAHeader2.find('### ASCCONV BEGIN ###') + len('### ASCCONV BEGIN ###')
    endposition = SiemensCSAHeader2.find('### ASCCONV END ###')
    InterestingSiemensHeader = SiemensCSAHeader2[startposition:endposition].splitlines()
    datadict = {}
    for theline in InterestingSiemensHeader[1:]:
        thepair = theline.split()
        datadict[thepair[0]] = thepair[2]
    return datadict

# read in the datafile
if len(sys.argv) != 2:
    print("Print the slice acquisition times (in seconds) of all the slices in a Siemens mosaic dicom file")
    print("")
    print("usage: getslicetimes inputdicomfile")
    exit()
filename = sys.argv[1]
plan = dicom.read_file(filename)
timestr = float(plan.AcquisitionTime)
thetr = float(plan.RepetitionTime)
timeconv = 3600 * (int(timestr / 10000) % 100) + 60 * (int(timestr / 100) % 100) + timestr % 100 + (timestr - int(timestr))
acqnum = plan.AcquisitionNumber
# thesiemensheader=getsiemensmrheader(plan)
# slicethickness=thesiemensheader['sSliceArray.asSlice[0].dThickness']
# inplanerot=thesiemensheader['sSliceArray.asSlice[0].dInPlaneRot']
thesaglist, thetralist, thecorlist = getslicepositions(plan)

numslices = len(thesaglist)
locs = np.zeros((4, numslices), dtype='float')
locs[0, :] = thetralist
locs[1, :] = thesaglist
locs[2, :] = thecorlist

try:
    mosaicinfo = plan[0x0019, 0x1029].value
except KeyError:
    print('key error getting mosaicinfo')

whichslice = 0
for slicetime in mosaicinfo:
    locs[3, whichslice] = (slicetime % thetr) / 1000.0
    whichslice = whichslice + 1
    print((slicetime % thetr) / 1000.0)

# print locs
